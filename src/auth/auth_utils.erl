%%%-------------------------------------------------------------------
%%% @author Lukasz Opiola
%%% @copyright (C): 2014 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc: This module provides functionalities used in authentication flow
%%% and convenience functions that can be used from auth modules.
%%% @end
%%%-------------------------------------------------------------------
-module(auth_utils).

-include_lib("ctool/include/logging.hrl").
-include("datastore/oz_datastore_models_def.hrl").
-include("auth_common.hrl").
-include("gui/common.hrl").

%% API
% Convenience functions
-export([local_auth_endpoint/0, get_value_binary/2, extract_emails/1]).

% Authentication flow handling
-export([
    validate_login/0,
    get_user_by_oauth_account/1,
    acquire_user_by_oauth_account/1,
    acquire_user_by_external_access_token/2
]).

%%%===================================================================
%%% API functions
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Returns the URL that will be used to redirect back authentication flow.
%% @end
%%--------------------------------------------------------------------
-spec local_auth_endpoint() -> binary().
local_auth_endpoint() ->
    <<(http_utils:fully_qualified_url(gui_ctx:get_requested_hostname()))/binary,
        ?local_auth_endpoint>>.

%%--------------------------------------------------------------------
%% @doc
%% Gets value from a proplist and converts it to binary, if needed.
%% Useful in auth_xxx modules which are required to return binaries in the
%% #oauth_account{} record.
%% @end
%%--------------------------------------------------------------------
-spec get_value_binary(Key :: term(), Proplist :: proplists:proplist()) ->
    binary().
get_value_binary(Key, Proplist) ->
    case proplists:get_value(Key, Proplist, <<"">>) of
        Bin when is_binary(Bin) ->
            Bin;
        null ->
            <<"">>;
        Other ->
            str_utils:to_binary(Other)
    end.


%%--------------------------------------------------------------------
%% @doc
%% Extracts email list from a JSON proplist (standard for OpenId).
%% @end
%%--------------------------------------------------------------------
-spec extract_emails(proplists:proplist()) -> [binary()].
extract_emails(JSONProplist) ->
    case get_value_binary(<<"email">>, JSONProplist) of
        <<"">> -> [];
        Email -> [Email]
    end.


%%--------------------------------------------------------------------
%% @doc Function used to validate login by processing a redirect that came from
%% an OAuth provider. Must be called from gui context to work. Returns one of the following:
%% 1. atom 'new_user' if the login has been verified and a new user has been created
%% 2. {redirect, URL} if the account already exists, to state where the user should be redirected now
%% 3. {error, Description} if the validation failed or any other error occurred.
%% @end
%%--------------------------------------------------------------------
-spec validate_login() -> new_user | {redirect, URL :: binary()} | {error, term()}.
validate_login() ->
    try
        % Check url params for state parameter
        ParamsProplist = gui_ctx:get_url_params(),
        State = proplists:get_value(<<"state">>, ParamsProplist),
        StateInfo = auth_logic:lookup_state_token(State),
        case StateInfo of
            error ->
                % This state token was not generated by us, invalid
                ?alert("Security breach attempt spotted - invalid state. GET params:~n~p~nPOST params:~n~p",
                    [ParamsProplist, gui_ctx:get_form_params()]),
                {error, ?error_auth_invalid_request};

            Props ->
                % State token ok, get handler module and redirect address connected with this request
                Module = proplists:get_value(module, Props),
                Redirect = proplists:get_value(redirect_after_login, Props),

                % Validate the request and gather user info
                case Module:validate_login() of
                    {error, Reason} ->
                        % The request could not be validated
                        ?alert("Security breach attempt spotted. Reason:~p~nRequest params:~n~p~nPOST params:~n~p",
                            [Reason, ParamsProplist, gui_ctx:get_form_params()]),
                        {error, ?error_auth_invalid_request};

                    {ok, OriginalOAuthAccount} ->
                        #oauth_account{
                            email_list = OriginalEmails
                        } = OriginalOAuthAccount,
                        Emails = lists:map(fun(Email) ->
                            http_utils:normalize_email(Email)
                        end, OriginalEmails),
                        OAuthAccount = OriginalOAuthAccount#oauth_account{
                            email_list = Emails
                        },
                        case proplists:get_value(connect_account, Props) of
                            false ->
                                % Standard login, check if there is an account belonging to the user
                                case acquire_user_by_oauth_account(OAuthAccount) of
                                    {exists, UserId} ->
                                        gui_session:log_in(UserId),
                                        {redirect, Redirect};
                                    {created, UserId} ->
                                        gui_session:log_in(UserId),
                                        gui_session:put_value(firstLogin, true),
                                        new_user
                                end;
                            true ->
                                % Account adding flow
                                % Check if this account isn't connected to other profile
                                case get_user_by_oauth_account(OAuthAccount) of
                                    {ok, _} ->
                                        % The account is used on some other profile, cannot proceed
                                        {error, ?error_auth_account_already_connected};
                                    _ ->
                                        % Not found = ok, get the user and add new provider info
                                        UserId = gui_session:get_user_id(),
                                        ok = user_logic:add_oauth_account(UserId, OAuthAccount),
                                        {redirect, <<?PAGE_AFTER_LOGIN, "?expand_accounts=true">>}
                                end
                        end
                end
        end
    catch
        T:M ->
            ?error_stacktrace("Error in validate_login - ~p:~p", [T, M]),
            {error, ?error_auth_invalid_request}
    end.


%%--------------------------------------------------------------------
%% @doc
%% Retrieves system user based on given OAuth account. If the account is not
%% connected to any user, returns {error, not_found}.
%% @end
%%--------------------------------------------------------------------
-spec get_user_by_oauth_account(#oauth_account{}) -> {ok, #document{}} | {error, not_found}.
get_user_by_oauth_account(OAuthAccount) ->
    #oauth_account{provider_id = ProviderId, user_id = OAuthUserId} = OAuthAccount,
    case od_user:get_by_criterion({oauth_user_id, {ProviderId, OAuthUserId}}) of
        {ok, #document{} = Doc} ->
            {ok, Doc};
        {error, {not_found, od_user}} ->
            {error, not_found}
    end.


%%--------------------------------------------------------------------
%% @doc
%% Tries to retrieve system user by given oauth account, and if it does not
%% exist, creates a new user with that account connected. If a new user is
%% created, the function returns when its effective relations have been
%% fully synchronized.
%% In both cases, returns the user id.
%% @end
%%--------------------------------------------------------------------
-spec acquire_user_by_oauth_account(#oauth_account{}) ->
    {exists | created, UserId :: od_user:id()}.
acquire_user_by_oauth_account(OAuthAccount) ->
    case get_user_by_oauth_account(OAuthAccount) of
        {ok, #document{key = UserId}} ->
            {exists, UserId};
        {error, not_found} ->
            {ok, UserId} = create_user_by_oauth_account(OAuthAccount),
            entity_graph:ensure_up_to_date(),
            {created, UserId}
    end.


%%--------------------------------------------------------------------
%% @doc
%% Tries to retrieve system user by given oauth account, and if it does not
%% exist, creates a new user with that account connected. If a new user is
%% created, the function returns when its effective relations have been
%% fully synchronized.
%% In both cases, returns the user id.
%% @end
%%--------------------------------------------------------------------
-spec acquire_user_by_external_access_token(ProviderId :: atom(), AccessToken :: binary()) ->
    {exists | created, UserId :: od_user:id()} | {error, bad_access_token}.
acquire_user_by_external_access_token(ProviderId, AccessToken) ->
    Module = auth_config:get_provider_module(ProviderId),
    case Module:get_user_info(AccessToken) of
        {ok, OAuthAccount} ->
            acquire_user_by_oauth_account(OAuthAccount);
        {error, bad_access_token} ->
            {error, bad_access_token}
    end.


%%%===================================================================
%%% Internal functions
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Creates a new user based on given OAuth account. Before creating such user,
%% it must be ensured that user with such OAuth account does not exist.
%% @end
%%--------------------------------------------------------------------
-spec create_user_by_oauth_account(#oauth_account{}) ->
    {ok, UserId :: od_user:id()} | {error, not_found}.
create_user_by_oauth_account(#oauth_account{email_list = Emails} = OAuthAccount) ->
    UserInfo = #od_user{
        email_list = Emails,
        name = resolve_name_from_oauth_account(OAuthAccount),
        connected_accounts = [OAuthAccount]
    },
    user_logic:create(UserInfo).


%%--------------------------------------------------------------------
%% @private
%% @doc
%% Resolve what name should be set for user based on his OAuth account.
%% If user name was send by OAuth provider, use it.
%% If not, try this with login.
%% If not, try using the email (the part before @) as name.
%% If there is no email, return a generic "unknown" string.
%% @end
%%--------------------------------------------------------------------
-spec resolve_name_from_oauth_account(#oauth_account{}) -> binary().
resolve_name_from_oauth_account(OAuthAccount) ->
    case OAuthAccount of
        #oauth_account{name = <<"">>, login = <<"">>, email_list = []} ->
            <<"Unknown Name">>;
        #oauth_account{name = <<"">>, login = <<"">>, email_list = EmailList} ->
            hd(binary:split(hd(EmailList), <<"@">>));
        #oauth_account{name = <<"">>, login = Login} ->
            Login;
        #oauth_account{name = Name} ->
            Name
    end.



