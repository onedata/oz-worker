%% ===================================================================
%% @author Lukasz Opiola
%% @copyright (C): 2014 ACK CYFRONET AGH
%% This software is released under the MIT license
%% cited in 'LICENSE.txt'.
%% @end
%% ===================================================================
%% @doc: This module provides functionalities used in authentication flow
%% and convenience functions that can be used from auth modules.
%% @end
%% ===================================================================
-module(auth_utils).

-include_lib("ctool/include/logging.hrl").
-include("dao/dao_types.hrl").
-include("auth_common.hrl").
-include_lib("ibrowse/include/ibrowse.hrl").

%% API
% Authentication flow handling
-export([validate_login/0]).

% Convenience functions
-export([local_auth_endpoint/0, proplist_to_params/1, fully_qualified_url/1, normalize_email/1]).

-define(STATE_TTL, 60).
-define(STATE_ETS, auth_state_ets).


%% ====================================================================
%% API functions
%% ====================================================================


%% local_auth_endpoint/0
%% ====================================================================
%% @doc Returns the URL that will be used to redirect back authentication flow.
%% @end
%% ====================================================================
-spec local_auth_endpoint() -> binary().
%% ====================================================================
local_auth_endpoint() ->
    <<(auth_utils:fully_qualified_url(gui_ctx:get_requested_hostname()))/binary, ?local_auth_endpoint>>.


validate_login() ->
    try
        % Check url params for state parameter
        ParamsProplist = gui_ctx:get_request_params(),
        State = proplists:get_value(<<"state">>, ParamsProplist),
        StateInfo = auth_logic:lookup_state_token(State),
        case StateInfo of
            error ->
                % This state token was not generated by us, invalid
                ?alert("Security breach attempt spotted. Request params:~n~p", [ParamsProplist]),
                {error, ?error_auth_invalid_request};

            Props ->
                % State token ok, get handler module and redirect address connected with this request
                Module = proplists:get_value(module, Props),
                Redirect = proplists:get_value(redirect_after_login, Props),
                % Validate the request and gather user info
                case Module:validate_login(proplists:delete(<<"state">>, ParamsProplist)) of
                    {error, Reason} ->
                        % The request could not be validated
                        ?alert("Security breach attempt spotted. Reason:~p~nRequest params:~n~p", [Reason, ParamsProplist]),
                        {error, ?error_auth_invalid_request};

                    {ok, OriginalOAuthAccount = #oauth_account{provider_id = ProviderID, user_id = UserID, email_list = OriginalEmails, name = Name}} ->
                        Emails = lists:map(fun(Email) -> auth_utils:normalize_email(Email) end, OriginalEmails),
                        OAuthAccount = OriginalOAuthAccount#oauth_account{email_list = Emails},
                        case proplists:get_value(connect_account, Props) of
                            false ->
                                % Standard login, check if there is an account belonging to the user
                                case user_logic:get_user_doc({connected_account_user_id, {ProviderID, UserID}}) of
                                    {ok, #veil_document{uuid = UserIdString}} ->
                                        UserId = list_to_binary(UserIdString),
                                        % The account already exists
                                        gui_ctx:create_session(),
                                        gui_ctx:set_user_id(UserId),
                                        {redirect, Redirect};
                                    _ ->
                                        % Error
                                        % This is a first login
                                        % Check if any of emails is in use
                                        case is_any_email_in_use(Emails) of
                                            true ->
                                                % At least one email is in database, cannot create account
                                                {error, ?error_auth_new_email_occupied};
                                            false ->
                                                % All emails are available, proceed
                                                UserInfo = #user{email_list = Emails, name = Name, connected_accounts = [
                                                    OAuthAccount
                                                ]},
                                                ?dump(UserInfo),
                                                {ok, UserId} = user_logic:create(UserInfo),
                                                gui_ctx:create_session(),
                                                gui_ctx:set_user_id(UserId),
                                                new_user
                                        end
                                end;

                            true ->
                                % Account adding flow
                                % Check if this account isn't connected to other profile
                                case user_logic:get_user({connected_account_user_id, {ProviderID, UserID}}) of
                                    {ok, _} ->
                                        % The account is used on some other profile, cannot proceed
                                        {error, ?error_auth_account_already_connected};
                                    _ ->
                                        % Not found, ok
                                        % Check if any of emails is in use
                                        case is_any_email_in_use(Emails) of
                                            true ->
                                                % At least one email is in database, cannot create account
                                                {error, ?error_auth_connect_email_occupied};
                                            false ->
                                                % Everything ok, get the user and add new provider info
                                                UserId = gui_ctx:get_user_id(),
                                                {ok, #veil_document{record = UserRecord}} = user_logic:get_user(UserId),
                                                ModificationProplist = merge_connected_accounts(OAuthAccount, UserRecord),
                                                user_logic:modify(UserId, ModificationProplist),
                                                {redirect, <<"/manage_account">>}
                                        end
                                end
                        end
                end
        end
    catch
        T:M ->
            ?error_stacktrace("Error in validate_login - ~p:~p", [T, M]),
            {error, ?error_auth_invalid_request}
    end.

merge_connected_accounts(OAuthAccount, UserInfo) ->
    #user{name = Name, email_list = Emails, connected_accounts = ConnectedAccounts} = UserInfo,
    #oauth_account{name = ProvName, email_list = ConnAccEmails} = OAuthAccount,
    % If no name is specified, take the one provided with new info
    NewName = case Name of
                  <<"">> -> ProvName;
                  _ -> Name
              end,
    % Add emails from provider that are not yet added to account
    NewEmails = lists:foldl(
        fun(Email, Acc) ->
            case lists:member(Email, Acc) of
                true -> Acc;
                false -> Acc ++ [Email]
            end
        end, Emails, ConnAccEmails),
    [
        {name, NewName},
        {email_list, NewEmails},
        {connected_accounts, ConnectedAccounts ++ [OAuthAccount]}
    ].


%% proplist_to_params/1
%% ====================================================================
%% @doc Converts a proplist to a single x-www-urlencoded binary.
%% @end
%% ====================================================================
-spec proplist_to_params([{binary(), binary()}]) -> binary().
%% ====================================================================
proplist_to_params(List) ->
    lists:foldl(
        fun(Tuple, Acc) ->
            {KeyEncoded, ValueEncoded} = case Tuple of
                                             {Key, Value, no_encode} ->
                                                 {Key, Value};
                                             {Key, Value} ->
                                                 {gui_str:url_encode(Key), gui_str:url_encode(Value)}
                                         end,
            Suffix = case Acc of
                         <<"">> -> <<"">>;
                         _ -> <<Acc/binary, "&">>
                     end,
            <<Suffix/binary, KeyEncoded/binary, "=", ValueEncoded/binary>>
        end, <<"">>, List).


%% fully_qualified_url/1
%% ====================================================================
%% @doc Converts the given URL to a fully quialified url, without leading www.
%% @end
%% ====================================================================
-spec fully_qualified_url(binary()) -> binary().
%% ====================================================================
fully_qualified_url(Binary) ->
    case Binary of
        <<"https://www.", Rest/binary>> -> <<"https://", Rest/binary>>;
        <<"https://", _/binary>> -> Binary;
        <<"www.", Rest/binary>> -> <<"https://", Rest/binary>>;
        _ -> <<"https://", Binary/binary>>
    end.


%% normalize_email/1
%% ====================================================================
%% @doc Performs email normalization by removing all the dots in the local part.
%% @end
%% ====================================================================
-spec normalize_email(binary()) -> binary().
%% ====================================================================
normalize_email(Email) ->
    case binary:split(Email, [<<"@">>], [global]) of
        [Account, Domain] ->
            <<(binary:replace(Account, <<".">>, <<"">>, [global]))/binary, "@", Domain/binary>>;
        _ ->
            Email
    end.


%% ====================================================================
%% Internal functions
%% ====================================================================

%% is_any_email_in_use/1
%% ====================================================================
%% @doc Creates a new document or updates an existing one. Internal function.
%% ====================================================================
-spec is_any_email_in_use(Email :: binary()) -> true | false.
%% ====================================================================
is_any_email_in_use(Emails) ->
    lists:foldl(
        fun(Email, Acc) ->
            case Acc of
                true -> true;
                _ -> user_logic:exists({email, Email})
            end
        end, false, Emails).