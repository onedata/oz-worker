%%%--------------------------------------------------------------------
%%% @author Michal Zmuda
%%% @copyright (C) 2015 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%--------------------------------------------------------------------
%%% @doc redirector listener starting & stopping
%%% @end
%%%--------------------------------------------------------------------
-module(op_listener).
-author("Michal Zmuda").

-include("op_channel/op_channel.hrl").
-include("registered_names.hrl").
-include_lib("ctool/include/logging.hrl").

-behaviour(listener_behaviour).

%% listener_behaviour callbacks
-export([port/0, start/0, stop/0, healthcheck/0]).

%%%===================================================================
%%% listener_starter_behaviour callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% {@link listener_starter_behaviour} callback port/0.
%% @end
%%--------------------------------------------------------------------
-spec port() -> integer().
port() ->
    {ok, Port} = application:get_env(?APP_Name, op_channel_port),
    Port.


%%--------------------------------------------------------------------
%% @doc
%% {@link listener_starter_behaviour} callback start/1.
%% @end
%%--------------------------------------------------------------------
-spec start() -> ok | {error, Reason :: term()}.
start() ->
    try
        % Get provider channel config
        ProviderChannelPort = port(),
        {ok, ProviderChannelHttpsAcceptors} = application:get_env(?APP_Name, op_channel_https_acceptors),

        % Get cert paths
        {ok, GrpCADir} = application:get_env(?APP_Name, grpca_dir),
        {ok, GuiCaCertFile} = application:get_env(?APP_Name, gui_cacert_file),
        {ok, GuiCertFile} = application:get_env(?APP_Name, gui_cert_file),
        {ok, GuiKeyFile} = application:get_env(?APP_Name, gui_key_file),

        {ok, GrpCABin} = file:read_file(grpca:cacert_path(GrpCADir)),
        [{_, GrpCADER, _} | _] = public_key:pem_decode(GrpCABin),

        {ok, GuiCABin} = file:read_file(GuiCaCertFile),
        [{_, GuiCADER, _} | _] = public_key:pem_decode(GuiCABin),

        Dispatch = cowboy_router:compile([{'_', [{?op_channel_endpoint, op_channel_handler, []}]}]),

        {ok, _} = cowboy:start_https(?op_channel_listener, ProviderChannelHttpsAcceptors,
            [
                {port, ProviderChannelPort},
                % @todo Use gui cert files rather than certs generated by GR, since
                % we don't yet have a mechanism of distributing the CA cert.
                {certfile, GuiCertFile},
                {keyfile, GuiKeyFile},
                {cacerts, [GuiCADER, GrpCADER]},
                {verify, verify_peer},
                {ciphers, ssl:cipher_suites() -- weak_ciphers()},
                {versions, ['tlsv1.2', 'tlsv1.1']}
            ],
            [
                {env, [{dispatch, Dispatch}]}
            ]),
        ok
    catch
        _Type:Error ->
            ?error_stacktrace("Could not start provider channel, error: ~p", [Error]),
            {error, Error}
    end.


%%--------------------------------------------------------------------
%% @doc
%% {@link listener_starter_behaviour} callback stop/1.
%% @end
%%--------------------------------------------------------------------
-spec stop() -> ok | {error, Reason :: term()}.
stop() ->
    case catch cowboy:stop_listener(?op_channel_listener) of
        (ok) ->
            ok;
        (Error) ->
            ?error("Error on stopping listener ~p: ~p", [?op_channel_listener, Error]),
            {error, redirector_stop_error}
    end.


%%--------------------------------------------------------------------
%% @doc
%% Returns the status of a listener.
%% @end
%%--------------------------------------------------------------------
-spec healthcheck() -> ok | {error, server_not_responding}.
healthcheck() ->
    Port = port(),
    case http_client:get("https://127.0.0.1:" ++ integer_to_list(Port), [], <<>>, [insecure]) of
        {ok, _, _, _} ->
            ok;
        _ ->
            {error, server_not_responding}
    end.

%% ====================================================================
%% @private
%% @doc
%% Returns list of weak ciphers.
%% @end
-spec weak_ciphers() -> list().
%% ====================================================================
weak_ciphers() ->
    [{dhe_rsa, des_cbc, sha}, {rsa, des_cbc, sha}].
