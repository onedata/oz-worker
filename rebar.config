%% behaviours should be compiled before other files
{erl_first_files, [
    "src/http/rest/translators/rest_translator_behaviour.erl",
    "src/auth/auth_protocol_behaviour.erl",
    "src/auth/onezone_plugin_behaviour.erl",
    "src/auth/openid_plugin_behaviour.erl",
    "src/auth/entitlement_mapping/entitlement_parser_behaviour.erl",
    "src/auth/attribute_mapping/attribute_mapper_behaviour.erl"
]}.

{clean_files, [
    "test/eunit_results",
    "test_distributed/*.beam",
    "test_distributed/logs/*"
]}.

{cover_enabled, true}.

{dialyzer, [
    {warnings, [error_handling, race_conditions]},
    {plt_extra_apps, [ranch, ctool, cluster_worker]}
]}.

%% eunit opts - Maven-like output formatting
{eunit_opts, [verbose, {report, {eunit_surefire, [{dir, "./test/eunit_results"}]}}]}.

{deps, [
    {onedata_documentation, {raw, {git, "ssh://git@git.onedata.org:7999/vfs/onedata-documentation.git", {ref, "2a594d16a73"}}}},
    {ctool, {git, "ssh://git@git.onedata.org:7999/vfs/ctool.git", {ref, "066010fde3"}}},
    {cluster_worker, {git, "ssh://git@git.onedata.org:7999/vfs/cluster-worker.git", {ref,"5a6e0388798"}}},
    {cluster_manager, {raw, {git, "ssh://git@git.onedata.org:7999/vfs/cluster-manager.git", {ref, "6baf74cfad43a"}}}},
    {gui, {git, "ssh://git@git.onedata.org:7999/vfs/gui.git", {ref, "16586d0caef"}}},
    {esaml, {git, "https://github.com/onedata/esaml.git", {ref, "2cd59b3620"}}},
    {erldns, {git, "https://github.com/wgslr/erl-dns.git", {ref, "3b55aac"}}},
    {observer_cli, "1.0.7"}
]}.

%% plugins
{plugins, [rebar3_hex, rebar3_elixir,
    {rebar_raw_resource,
        {git, "git://github.com/tburghart/rebar_raw_resource.git",
        {tag, "0.5.0"}}
    }
]}.

{erl_opts, [
    fail_on_warning,
    debug_info,
    {src_dirs, ["src"]}
]}.

{pre_hooks, [
    %% Make dir for eunit' surefire test results
    {eunit, "mkdir -p test/eunit_results"},
    %% Sometimes, in some cases epmd daemon doesn't
    %% start during eunit tests, so we need to force start it
    {eunit, "epmd -daemon"}
]}.

{post_hooks, [
    {release, "rm -f _build/*/rel/oz_worker/bin/install_upgrade.escript"},
    {release, "rm -f _build/*/rel/oz_worker/bin/nodetool"},
    {release, "rm -f _build/*/rel/oz_worker/bin/oz_worker-*"},
    {release, "rm -f _build/*/rel/oz_worker/bin/start_clean.boot"},
    {release, "rm -f _build/*/rel/oz_worker/bin/no_dot_erlang.boot"}
]}.

%% relx configuration
{relx, [
    {release, {"oz_worker", "1.0.0"},
        [
            kernel,
            stdlib,
            xmerl,
            sasl,
            public_key,
            crypto,
            ssl,
            gui,
            % Meck is needed only for development purposes, should be removed before release.
            meck,
            % All ctool deps will be included in the release package,
            % so there is no need to list them here.
            ctool,
            mnesia,
            {cberl, load},
            {bp_tree, load},
            {cluster_worker, load},
            {observer_cli, load},
            {gen_server2, load},
            %% deps included by default by reltool but not included by relx
            {base64url, load},
            certifi,
            {common_test, load},
            {debugger, load},
            {edoc, load},
            {enacl_p, load},
            {erts, load},
            esaml,
            {et, load},
            {eunit, load},
            gen_smtp,
            hackney,
            inets,
            {jiffy, load},
            {macaroons, load},
            observer,
            {otp_mibs, load},
            {runtime_tools, load},
            {snmp, load},
            {ssh, load},
            {wx, load},
            % erldns dependencies
            proper,
            parse_xfrm_utils,
            iso8601, % without this one erldns will not start
            poolboy,
            erldns,
            locus,
            oz_worker
        ]},

    {vm_args, "rel/files/vm.args"},
    {sys_config, "rel/files/app.config"},
    {target_dir, "oz_worker"},
    {include_src, false},
    {dev_mode, true},

    {overlay, [
        %% Copy base files for starting and interacting with node
        {copy, "node_package/priv/base/erl", "erts-{{erts_vsn}}/bin/erl"},
        {copy, "node_package/priv/base/nodetool", "erts-{{erts_vsn}}/bin/nodetool"},
        {template, "node_package/priv/base/runner", "bin/oz_worker"},
        {template, "node_package/priv/base/env.sh", "lib/env.sh"},

        %% Copy config files
        {mkdir, "etc"},
        {copy, "rel/files/autogenerated.config", "etc/autogenerated.config"},
        {template, "rel/files/vm.args", "etc/vm.args"},
        {copy, "rel/files/auth.config", "etc/auth.config"},
        {copy, "rel/files/template.auth.config", "etc/template.auth.config"},

        %% Copy plugins and Geolocation DB (MaxMind) files
        {copy, "rel/files/plugins", "etc/"},
        {copy, "rel/files/geo-db", "etc/"},

        %% Copy cert dirs
        {copy, "rel/files/certs", "etc/"},
        {copy, "rel/files/cacerts", "etc/"},

        %% Copy additional data files
        {mkdir, "data"},
        {copy, "LICENSE.txt", "./data/"},
        {copy, "README.md", "./data/"},
        {copy, "rel/files/empty_zones.erldns.json", "./data/"},

        {template, "rel/files/app.config", "data/app.config"},

        % Copy the compatibility reference:
        %   1) Default compatibility reference for this software version
        {copy,
            "_build/default/lib/onedata_documentation/doc/compatibility_reference/compatibility.json",
            "./data/compatibility.default.json"
        },
        %   2) Placeholder for the dynamic compatibility file that can be
        %      overwritten by a newer registry when such is available. Will not
        %      overwrite the older one in case of upgrade, as the etc dir is
        %      persisted.
        {copy,
            "_build/default/lib/onedata_documentation/doc/compatibility_reference/compatibility.json",
            "./etc/compatibility.json"
        },

        % Onezone GUI static files
        {copy, "_build/default/lib/gui_static.tar.gz", "./data/"},

        % Set up gui_static structure
        {mkdir, "etc/gui_static"},

        {mkdir, "etc/gui_static/ozw"},
        {mkdir, "etc/gui_static/ozw/empty"},
        {copy, "rel/files/empty_service_page.html", "etc/gui_static/ozw/empty/index.html"},

        {mkdir, "etc/gui_static/opw"},
        {mkdir, "etc/gui_static/opw/empty"},
        {copy, "rel/files/empty_service_page.html", "etc/gui_static/opw/empty/index.html"},

        {mkdir, "etc/gui_static/onp"},
        {mkdir, "etc/gui_static/onp/empty"},
        {copy, "rel/files/empty_service_page.html", "etc/gui_static/onp/empty/index.html"},

        {mkdir, "etc/gui_static/hrv"}
    ]},

    {extended_start_script, true}
]}.

%% Profiles configuration
{profiles, [
    {package, [
        {relx, [{dev_mode, false}]}
    ]},
    {bamboo, [
        {relx, [{dev_mode, false}]},
        {post_hooks, [
            {release, "rm -rf _build/default/rel"},
            {release, "mv -f _build/bamboo/rel _build/default"},
            {release, "rm -rf _build/default/lib/oz_worker"},
            {release, "mv -f _build/bamboo/lib/oz_worker _build/default/lib"}
        ]}
    ]}
]}.
