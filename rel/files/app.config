[
    %% SASL config
    {sasl, [{sasl_error_logger, false}]},

    %% lager config
    {lager, [
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, info},
            %% rotate error log once a month (first day of month, 1 a.m) or when it reaches 1 GB; keep 1000 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/error.log"}, {level, error}, {size, 1048576000}, {date, "$M1D1"}, {count, 1000}]},
            %% rotate info log once a week (friday at 11 p.m) or when it reaches 100 MB; keep 100 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/info.log"}, {level, info}, {size, 104857600}, {date, "$W5D23"}, {count, 100}]},
            %% rotate info log once a day (at midnight) or when it reaches 10 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/debug.log"}, {level, debug}, {size, 10485760}, {date, "$D0"}, {count, 10}]}
        ]},
        {error_logger_hwm, 200},
        % when lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % when lager should return from mode to synchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},


    %% cluster_worker config
    {cluster_worker, [

        %% ===================================================================
        %% PLUGINS
        %% ===================================================================

        % names of modules implementing given plugins
        {datastore_config_plugin, datastore_config_plugin},
        {node_manager_plugin, node_manager_plugin},
        {dns_worker_plugin, dns_worker_plugin},

        %% ===================================================================
        %% DNS
        %% ===================================================================

        %% DNS port
        {dns_port, 53},
        %% Maximum supported UDP size, that will be advertised by the server (via EDNS). If a client advertises a bigger
        %% value, it will be assumed to be as high as this.
        {edns_max_udp_size, 1280},
        %% Number of dns tcp acceptors
        {dns_tcp_acceptor_pool_size, 20},
        %% Time (in sec) after which dns closes idle connection
        {dns_tcp_timeout, 20},
        %% DNS config file location
        {dns_config_file, "{{platform_data_dir}}/dns.config"}
    ]},

    %% oz_worker config
    {oz_worker, [
        % Developer mode - enables developer features such as REST endpoints
        % with functionalities used in tests.
        {dev_mode, false},

        % Ports used by application
        {application_ports, [53, 80, 443, 7443, 8443]},

        %% Also used as the certificate domain and to provider CRLs.
        {http_domain, "127.0.0.1"},

        %% External IP of this node - used by load balancing (for DNS)
        {external_ip, "127.0.0.1"},

        % Name of OZ instance
        {oz_name, "unnamed"},

        %% List of beam directories to be covered, cover is not started if list is empty
        {covered_dirs, []},
        %% List of modules to be excluded during cover analysis
        {covered_excluded_modules, []},

        %% zone CA config
        {ozpca_dir, "{{platform_data_dir}}/ozpca"},
        {oz_key_file, "{{platform_data_dir}}/ozpca/oz_key.pem"},
        {oz_cert_file, "{{platform_data_dir}}/ozpca/oz_cert.pem"},

        %% REST config
        {rest_port, 8443},
        {rest_https_acceptors, 50},
        %% Macaroons authorization
        {authorization_macaroon_expiration_seconds, 31536000}, % 1 year
%%        {authentication_macaroon_expiration_seconds, 900}, % 15 minutes
        % @todo for now make the authentication macaroons live longer,
        % until automatic refreshing by provider is implemented: VFS-1766
        {authentication_macaroon_expiration_seconds, 36000}, % 10 hours

        %% GUI config
        {gui_port, 443},
        {gui_https_acceptors, 100},
        {gui_socket_timeout, 60000},
        {gui_max_keepalive, 30},
        {gui_cookie_ttl_seconds, 3600}, % one hour
        %% certs todo generate dedicated certs (this are example ones)
        {gui_key_file, "{{platform_etc_dir}}/certs/gui_key.pem"},
        {gui_cert_file, "{{platform_etc_dir}}/certs/gui_cert.pem"},
        {gui_cacert_file, "{{platform_etc_dir}}/cacerts/gui_cacert.pem"},
        {auth_config_file, "{{platform_data_dir}}/auth.config"},

        %% Directory where onezone expects to find static files of a its GUI.
        %% Any GUI (set of static files) can be placed there.
        {gui_static_root, "/var/www/html"},

        %% HTTP redirector config
        {gui_redirect_port, 80},
        {gui_redirect_acceptors, 10},

        %% DB config
        {db_nodes, ['db@127.0.0.1']},
        {view_def_location, "{{platform_data_dir}}/views/"},

        %% Subscriptions config
        {history_changes_stream_life_limit_seconds, 10},
        {changes_stream_presence_check_interval_seconds, 30},
        {wait_for_latest_changes_in_cache, 1500},
        {subscriptions_sent_revisions_limit, 40},
        {subscription_cache_size, 1000},
        {subscription_batch_ttl, 2000},
        {subscriptions_wss_port, 7443},
        {subscroptions_https_acceptors, 50}
    ]}
].
