[
    %% SASL config
    {sasl, [{sasl_error_logger, false}]},

    %% lager config
    {lager, [
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, info},
            %% rotate error log once a month (first day of month, 1 a.m) or when it reaches 1 GB; keep 1000 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/error.log"}, {level, error}, {size, 1048576000}, {date, "$M1D1"}, {count, 1000}]},
            %% rotate info log once a week (friday at 11 p.m) or when it reaches 100 MB; keep 100 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/info.log"}, {level, info}, {size, 104857600}, {date, "$W5D23"}, {count, 100}]},
            %% rotate info log once a day (at midnight) or when it reaches 10 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/debug.log"}, {level, debug}, {size, 10485760}, {date, "$D0"}, {count, 10}]}
        ]},
        {error_logger_hwm, 200},
        % when lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % when lager should return from mode to synchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},


    %% cluster_worker config
    {cluster_worker, [

        %% ===================================================================
        %% PLUGINS
        %% ===================================================================

        % names of modules implementing given plugins
        {datastore_config_plugin, datastore_config_plugin},
        {node_manager_plugin, node_manager_plugin},
        {dns_worker_plugin, dns_worker_plugin},
        {identity_repository, owned_identity_repository},

        %% ===================================================================
        %% DNS
        %% ===================================================================

        %% DNS port
        {dns_port, 53},
        %% Maximum supported UDP size, that will be advertised by the server (via EDNS). If a client advertises a bigger
        %% value, it will be assumed to be as high as this.
        {edns_max_udp_size, 1280},
        %% Number of dns tcp acceptors
        {dns_tcp_acceptor_pool_size, 20},
        %% Time (in sec) after which dns closes idle connection
        {dns_tcp_timeout, 20},
        %% DNS config file location
        {dns_config_file, "{{platform_data_dir}}/dns.config"}
    ]},

    %% oz_worker config
    {oz_worker, [
        % Developer mode - enables developer features such as REST endpoints
        % with functionalities used in tests.
        {dev_mode, false},

        % Ports used by application
        {application_ports, [53, 80, 443, 7443, 7770, 7771, 8443]},

        %% Also used as the certificate domain and to provider CRLs.
        {http_domain, "127.0.0.1"},

        %% External IP of this node - used by load balancing (for DNS)
        {external_ip, "127.0.0.1"},

        % Name of OZ instance
        {oz_name, "unnamed"},

        %% List of beam directories to be covered, cover is not started if list is empty
        {covered_dirs, []},
        %% List of modules to be excluded during cover analysis
        {covered_excluded_modules, []},

        %% zone CA config
        {ozpca_dir, "{{platform_data_dir}}/ozpca"},
        {oz_key_file, "{{platform_data_dir}}/ozpca/oz_key.pem"},
        {oz_cert_file, "{{platform_data_dir}}/ozpca/oz_cert.pem"},

        %% REST config
        {rest_port, 8443},
        {rest_https_acceptors, 50},
        %% Prefix to the REST API - all paths must begin with it.
        {rest_api_prefix, "/api/v3/onezone"},
        %% Macaroons authorization
        {authorization_macaroon_expiration_seconds, 31536000}, % 1 year
%%        {authentication_macaroon_expiration_seconds, 900}, % 15 minutes
        % @todo for now make the authentication macaroons live longer,
        % until automatic refreshing by provider is implemented: VFS-1766
        {authentication_macaroon_expiration_seconds, 36000}, % 10 hours

        %% GUI config
        {gui_port, 443},
        {gui_https_acceptors, 100},
        {gui_socket_timeout, 60000},
        {gui_max_keepalive, 30},
        {gui_cookie_ttl_seconds, 3600}, % one hour
        %% certs todo generate dedicated certs (this are example ones)
        {gui_key_file, "{{platform_etc_dir}}/certs/gui_key.pem"},
        {gui_cert_file, "{{platform_etc_dir}}/certs/gui_cert.pem"},
        {gui_cacert_file, "{{platform_etc_dir}}/cacerts/gui_cacert.pem"},
        {auth_config_file, "{{platform_data_dir}}/auth.config"},
        %% List of HTTP headers that will be send with every response.
        {gui_response_headers, [
            {<<"X-Frame-Options">>, <<"SAMEORIGIN">>}
%%            {<<"Strict-Transport-Security">>, <<"max-age=31536000; includeSubDomains">>}
        ]},

        %% Directory where onezone tries to find static files of a custom GUI.
        %% If the directory is not empty, it will serve the static files
        %% from it. If not, it will fall back to default, embedded GUI.
        {gui_custom_static_root, "/var/www/html"},
        %% Directory where static files of default, embedded GUI are kept.
        %% Used when gui_custom_static_root is non-existent or empty.
        {gui_default_static_root, "{{platform_data_dir}}/gui_static"},

        %% Decides if docs proxy shall be used. Related envs are used only
        %% when true.
        {gui_docs_proxy_enabled, true},
        %% Root path of all documentation-related static files. They are served
        %% by following a HTTP request to a third-party server with static
        %% files (the response is followed back to the client).
        %% Must start with a slash and NOT end with a slash.
        {gui_docs_static_root, "/docs"},
        %% URL of the server with documentation
        {gui_docs_server, "http://172.17.0.2:8080"},

        %% HTTP redirector config
        {gui_redirect_port, 80},
        {gui_redirect_acceptors, 10},

        %% DB config
        {db_nodes, ['db@127.0.0.1']},
        {view_def_location, "{{platform_data_dir}}/views/"},

        %% Subscriptions config
        {history_changes_stream_life_limit_seconds, 10},
        {changes_stream_presence_check_interval_seconds, 30},
        {wait_for_latest_changes_in_cache, 1500},
        {subscriptions_sent_revisions_limit, 40},
        {subscription_cache_size, 1000},
        {subscription_batch_ttl, 2000},
        {subscriptions_wss_port, 7443},
        {subscroptions_https_acceptors, 50},

        %% Location Service config
        {location_service_port, 7770},
        {location_service_rest_port, 7771},
        {location_service_bootstrap_nodes, []},

        %% Identity verification config
        {public_key_refresh_interval_seconds, 600},
        {identity_key_file, "{{platform_data_dir}}/ozpca/identity_key.pem"},
        {identity_cert_file, "{{platform_data_dir}}/ozpca/identity_cert.pem"},

        %% Group graph config
        {group_graph_refresh_interval, 500},

        %% Predefined groups config - groups that are created automatically
        %% after the application has started. If the groups exist, no action
        %% is performed.
        %% Each group is represented by a proplist with keys
        %% id, name, oz_api_privileges.
        %% Allows to specify the ID, name and OZ API privileges of every group.
        %% oz_api_privileges can be either an explicit list of privileges or a
        %% tuple of atoms indicating module and function to call which must
        %% return the list of privileges.
        {predefined_groups, [
            [
                {id, <<"admins">>},
                {name, <<"admins">>},
                {oz_api_privileges, {oz_api_privileges, all_privileges}}
            ]
        ]},

        %% A list of tuples {onepanel_role, [group_id]}. When a user is
        %% retrieved from onepanel, his role will be sent in response. This env
        %% allows to define to which groups such user should be added
        %% automatically upon first login.
        %% If the role changes, any consecutive login will cause the user
        %% to be added to all groups connected to his new role, but will not
        %% cause the user to be removed from any group!
        {onepanel_role_to_group_mapping, [
            {<<"admin">>, [<<"admins">>]}
        ]},

        %% Onepanel interface config
        {onepanel_rest_url, "https://127.0.0.1:9443"},
        {onepanel_user_endpoint, "/api/v3/onepanel/user"}
    ]}
].
