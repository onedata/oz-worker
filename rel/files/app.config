[
    %% SASL config
    {sasl, [{sasl_error_logger, false}]},

    %% logger configuration
    {lager, [
        {colored, true},
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, info},
            %% rotate error log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/error.log"}, {level, error}, {size, 52428800}, {count, 10}]},
            %% rotate info log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/info.log"}, {level, info}, {size, 52428800}, {count, 10}]},
            %% rotate debug log when it reaches 50 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "{{platform_log_dir}}/debug.log"}, {level, debug}, {size, 52428800}, {count, 10}]}
        ]},
        % Limit for the number of messages per second allowed from error_logger
        {error_logger_hwm, 200},
        % When lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % When lager should return from synchronous mode to asynchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% erldns config
    {erldns,[
        {servers, [
            [{name, inet_all_1}, {address, "0.0.0.0"}, {port, 53}, {family, inet}, {processes, 2}]
        ]},

        {dnssec, [
            {enabled, true}
        ]},

        {use_root_hints, false},
        {catch_exceptions, false},
        {zones, "{{platform_data_dir}}/empty_zones.erldns.json"},
        {pools, [
            {tcp_worker_pool, erldns_worker, [
                {size, 10},
                {max_overflow, 20}
            ]}
        ]}
    ]},

    %% cluster_worker config
    {cluster_worker, [

        %% ===================================================================
        %% PLUGINS
        %% ===================================================================

        % names of modules implementing given plugins
        {datastore_config_plugin, datastore_config_plugin},
        {node_manager_plugin, node_manager_plugin},

        %% ===================================================================
        %% Datastore changes
        %% ===================================================================

        {couchbase_changes_batch_size, 3},
        {couchbase_changes_update_interval, 1000},
        {couchbase_changes_stream_batch_size, 3},
        {couchbase_changes_stream_update_interval, 1000},

        %% ===================================================================
        %% Logs
        %% ===================================================================

        {monitoring_log_file, "{{platform_log_dir}}/node_manager_monitoring.log"},
        {throttling_log_file, "{{platform_log_dir}}/throttling_monitoring.log"},

        %% ===================================================================
        %% Exometer
        %% ===================================================================

        {counter_name_prefixes, [comp, oz_worker]}
    ]},

    %% oz_worker config
    {oz_worker, [
        % Developer mode - enables developer features such as REST endpoints
        % with functionalities used in tests.
        {dev_mode, false},

        % Build version in form:
        % <number of commits since last tag>-g<last commit hash abbrev>
        % e.g. 19-g0d0fd5b
        {build_version, "{{{build_version}}}"},

        %% Also used as the certificate domain and to provider CRLs.
        {http_domain, "127.0.0.1"},

        %% External IP of this node - used by load balancing (for DNS)
        {external_ip, "127.0.0.1"},

        % Name of OZ instance
        {oz_name, "unnamed"},
        {admin_emails, ["info@onedata.org"]},

        %% ===================================================================
        %% PORTS
        %% ===================================================================
        {gui_port, 443},

        %% ===================================================================
        %% Server certificates
        %% ===================================================================

        %% If enabled and there is no web key/cert under expected paths
        %% (web_key_file, web_cert_file) during startup, a new web cert will be
        %% generated with CN matching onezone domain and signed by CA cert
        %% found under test_web_cert_ca_path.
        %% This functionality is devised for test purposes and should not be
        %% used in production.
        {generate_web_cert_if_absent, true},
        %% The CA cert to sign auto generated test web certs. The file must
        %% contain both the key and cert.
        {test_web_cert_ca_path, "{{platform_etc_dir}}/cacerts/OneDataTestWebServerCa.pem"},
        {cacerts_dir, "{{platform_etc_dir}}/cacerts"},
        {web_key_file, "{{platform_etc_dir}}/certs/web_key.pem"},
        {web_cert_file, "{{platform_etc_dir}}/certs/web_cert.pem"},

        %% Prefix to the REST API - all paths must begin with it.
        %% Must begin with slash
        {rest_api_prefix, "/api/v3/onezone"},
        %% Macaroons authorization
        {authorization_macaroon_expiration_seconds, 31536000}, % 1 year
%%        {authentication_macaroon_expiration_seconds, 900}, % 15 minutes
        % @todo for now make the authentication macaroons live longer,
        % until automatic refreshing by provider is implemented: VFS-1766
        {authentication_macaroon_expiration_seconds, 36000}, % 10 hours
        %% Macaroons with longer TTL will not be accepted to impose higher
        %% security level.
        {max_provider_macaroon_ttl, 3600}, % 1 hour

        %% GUI config
        {gui_https_acceptors, 100},
        {gui_socket_timeout, 60000},
        {gui_max_keepalive, 30},
        {gui_cookie_ttl_seconds, 3600}, % one hour
        {auth_config_file, "{{platform_data_dir}}/auth.config"},
        {saml_config_file, "{{platform_data_dir}}/saml.config"},
        % After this time, login procedure via OIDC/SAML expires (if not completed)
        {state_token_ttl_secs, 300},
        %% List of HTTP headers that will be send with every response.
        {gui_response_headers, [
            {<<"X-Frame-Options">>, <<"SAMEORIGIN">>}
%%            {<<"Strict-Transport-Security">>, <<"max-age=31536000; includeSubDomains">>}
        ]},

        %% Directory where static files of default, embedded GUI are kept.
        %% Used when gui_custom_static_root is non-existent or empty.
        {gui_default_static_root, "{{platform_data_dir}}/gui_static"},
        %% Directory where onezone tries to find static files of a custom GUI.
        %% If the directory is not empty, it will serve the static files
        %% from it. If not, it will fall back to default, embedded GUI.
        {gui_custom_static_root, "/var/www/html/oz_worker"},

        %% Decides if docs proxy shall be used. Related envs are used only
        %% when true.
        {gui_docs_proxy_enabled, true},
        %% Root path of all documentation-related static files. They are served
        %% by following a HTTP request to a third-party server with static
        %% files (the response is followed back to the client).
        %% Must start with a slash and NOT end with a slash.
        {gui_docs_static_root, "/docs"},
        %% URL of the server with documentation
        {gui_docs_server, "http://172.17.0.2:8080"},

        %% DB config
        {db_nodes, ['db@127.0.0.1']},

        %% ===================================================================
        %% Graph Sync config
        %% ===================================================================
        %% Healthcheck interval for changes stream used by Graph Sync server
        {gs_server_stream_healthcheck_interval, 5000},


        %% DNS config
        {dns, [
            % Static mapings from onezone subdomain to list of ips.
            % Full domain will be based on http_domain as set in this config
            % file.
            % The subdomain must be a binary and must not begin or end
            % with the dot character.
            % Example:
            % {static_entries, [
            %     {<<"example-subdomain">>, [{10,0,0,1}, {10,0,0,2}]}
            % ]}
            {static_entries, []},

            % maximum number of ips to be presented as subdomain
            % ns1, ns2, ns3 etc. in NS records
            {ns_max_entries, 10},

            % minimum number of resolved nsX domains. If the number specified
            % is higher than number of oz_worker nodes, some domains will resolve
            % to the same IP address. Must not be higher than ns_max_entries
            % Use this option if your domain registart enforces
            % a minimum number of Nameserver addresses.
            {ns_min_entries, 2},

            %% SOA record parameters
            % Nameserver admin mailbox
            {soa_admin_mailbox, "dns-admin.onedata.org"},
            % This value must be incremented on every update of this config file
            {soa_serial, 2017090401},
            % Time interval before the zone should be refreshed
            {soa_refresh, 7200},
            % Time interval that should elapse before a failed refresh should be retried
            {soa_retry, 1800},
            % Time value that specifies the upper limit on the time interval that
            % can elapse before the zone is no longer authoritative
            {soa_expire, 1209600},
            % Time a NAME ERROR = NXDOMAIN result may be cached by any resolver
            {soa_minimum, 120},

            {a_ttl, 120},
            {ns_ttl, 120},
            {soa_ttl, 120}
        ]},

        %% Decides if every user should get a new space when an account for
        %% him is created.
        {enable_automatic_first_space, false},

        %% Minimum size of support that a provider must offer (smaller values
        %% will be declined).
        {minimum_space_support_size, 1000000}, % 1 MB

        %% Predefined groups config - groups that are created automatically
        %% after the application has started. If the groups exist, no action
        %% is performed.
        %% Each group is represented by a map with keys
        %% id, name, oz_privileges.
        %% Allows to specify the ID, name and OZ API privileges of every group.
        %% oz_privileges can be either an explicit list of privileges or a
        %% tuple of atoms indicating module and function to call which must
        %% return the list of privileges.
        {predefined_groups, [
            #{
                id => <<"admins">>,
                name => <<"Admins">>,
                oz_privileges => {privileges, oz_privileges}
            },
            #{
                id => <<"all_users">>,
                name => <<"All users">>,
                oz_privileges => []
            }
        ]},

        %% Decides if global groups should be enabled. If so, every user that
        %% is created will automatically be added to group defined in
        %% the global_groups env variable.
        {enable_global_groups, false},

        %% A list of global groups - every new user is added to them if the
        %% enable_global_groups variable is true. Must contain a list of tuples:
        %%     the first element is the id of a group (must be pre-created using
        %%         the predefined_groups variable)
        %%     the second element is the list of group privileges that will be
        %%         granted by default to users that are added to the group.
        {global_groups, [
            {<<"all_users">>, []}
        ]},

        %% Mapping onepanel_role => [group_id]. When a user is
        %% retrieved from onepanel, his role will be sent in response. This env
        %% allows to define to which groups such user should be added
        %% automatically upon first login.
        %% If the role changes, any consecutive login will cause the user
        %% to be added to all groups connected to his new role, but will not
        %% cause the user to be removed from any group!
        {onepanel_role_to_group_mapping, #{
            <<"admin">> => [<<"admins">>]
        }},

        %% Onepanel interface config
        {onepanel_rest_url, "https://127.0.0.1:9443"},
        {onepanel_users_endpoint, "/api/v3/onepanel/users/"},

        %% OAI-PMH config
        %% Prefix to the OAI-PMH API - all paths must begin with it
        {oai_pmh_api_prefix, "/oai_pmh"}
    ]}
].
