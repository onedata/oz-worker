[
    %% SASL config
    {sasl, [
        {sasl_error_logger, {file, "log/sasl-error.log"}},
        {errlog_type, error},
        {error_logger_mf_dir, "log/sasl"},      % Log directory
        {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
        {error_logger_mf_maxfiles, 5}           % 5 files max
    ]},

    %% lager config
    {lager, [
        {handlers, [
            %% show info level or higher level logs at console
            {lager_console_backend, info},
            %% rotate error log once a month (first day of month, 1 a.m) or when it reaches 1 GB; keep 1000 rotated logs
            {lager_file_backend, [{file, "log/error.log"}, {level, error}, {size, 1048576000}, {date, "$M1D1"}, {count, 1000}]},
            %% rotate info log once a week (friday at 11 p.m) or when it reaches 100 MB; keep 100 rotated logs
            {lager_file_backend, [{file, "log/info.log"}, {level, info}, {size, 104857600}, {date, "$W5D23"}, {count, 100}]},
            %% rotate info log once a day (at midnight) or when it reaches 10 MB; keep 10 rotated logs
            {lager_file_backend, [{file, "log/debug.log"}, {level, debug}, {size, 10485760}, {date, "$D0"}, {count, 10}]}
        ]},
        {error_logger_hwm, 200},
        % when lager should change mode to synchronous (log queue is longer than async_threshold)
        {async_threshold, 500},
        % when lager should return from mode to synchronous (log queue is shorter than (async_threshold - async_threshold_window)
        {async_threshold_window, 50}
    ]},

    %% globalregistry config
    {globalregistry, [
        {ports_in_use, [dns_port, gui_redirect_port, gui_port, op_channel_port, rest_port]},

        %% GRP config
        {grpca_dir, "resources/grpca"},
        {grpkey_file, "resources/grpca/grpkey.pem"},
        {grpcert_file, "resources/grpca/grpcert.pem"},
        {grpcert_domain, "127.0.0.1"}, %% the cert domain is also used to provide CRLs
        {root_cacert_file, '/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem'},

        %% Provider channel config
        {op_channel_port, 5555},
        {op_channel_https_acceptors, 50},

        %% REST config
        {rest_port, 8443},
        {rest_https_acceptors, 50},
        %% OpenID Provider for REST
        {authorization_code_expiration_seconds, 600},
        {access_token_expiration_seconds, 3600},
        {openid_issuer_url, "https://onedata.org"},

        %% GUI config
        {gui_port, 443},
        {gui_https_acceptors, 100},
        {gui_socket_timeout, 60000},
        {gui_max_keepalive, 30},
        {gui_sessions_cookie_ttl, 3600}, % one hour
        %% certs todo generate dedicated certs (this are example ones)
        {gui_key_file, "resources/certs/gui_key.pem"},
        {gui_cert_file, "resources/certs/gui_cert.pem"},
        {gui_cacert_file, "resources/cacerts/gui_cacert.pem"},

        %% HTTP redirector config
        {gui_redirect_port, 80},
        {gui_redirect_acceptors, 10},

        %% DB config
        {db_nodes, ['db@127.0.0.1']},
        {view_def_location, "resources/views/"},

        %% DNS config
        %% DNS port
        {dns_port, 53},
        %% Maximum supported UDP size, that will be advertised by the server (via EDNS). If a client advertises a bigger
        %% value, it will be assumed to be as high as this.
        {edns_max_udp_size, 1280},
        %% Number of dns tcp acceptors
        {dns_tcp_acceptor_pool_size, 20},
        %% Time (in sec) after which dns closes idle connection
        {dns_tcp_timeout, 20}
    ]}
].