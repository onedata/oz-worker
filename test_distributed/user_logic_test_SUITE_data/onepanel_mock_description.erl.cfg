%%%-------------------------------------------------------------------
%%% @author Lukasz Opiola
%%% @copyright (C) 2016 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc
%%% This is an OZ mock description used by appmock.
%%% @end
%%%-------------------------------------------------------------------
-module(onepanel_mock_description).
-author("Lukasz Opiola").

-behaviour(mock_app_description_behaviour).

-include_lib("appmock/include/appmock.hrl").
-include_lib("ctool/include/logging.hrl").

-export([rest_mocks/0, tcp_server_mocks/0]).

rest_mocks() ->
    [
        % Mock user endpoint, as if there were some users in onepanel.
        #rest_mock{port = 9443, path = <<"/api/v3/onepanel/users/:user">>,
            response = fun(Req, State) ->
                <<"Basic ", UserAndPassword/binary>> =
                    req:header(<<"authorization">>, Req),
                [User, Passwd] =
                    binary:split(base64:decode(UserAndPassword), <<":">>),
                {Method, _} = cowboy_req:method(Req),
                case {Method, User, Passwd} of
                    % user with id user1Id, credentials user1:password1
                    % and role 'user1Role'
                    {<<"GET">>, <<"user1">>, <<"password1">>} ->
                        ResponseBody = json_utils:encode([
                            {<<"userId">>, <<"user1Id">>},
                            {<<"userRole">>, <<"user1Role">>}
                        ]),
                        {#rest_response{code = 200, body = ResponseBody,
                            content_type = <<"application/json">>}, State};
                    % user with id user2Id, credentials user2:password2
                    % and role 'user2Role'
                    {<<"GET">>, <<"user2">>, <<"password2">>} ->
                        ResponseBody = json_utils:encode([
                            {<<"userId">>, <<"user2Id">>},
                            {<<"userRole">>, <<"user2Role">>}
                        ]),
                        {#rest_response{code = 200, body = ResponseBody,
                            content_type = <<"application/json">>}, State};
                    % Change password endpoint, working for user 3
                    {<<"PATCH">>, <<"user3">>, <<"password3">>} ->
                        case req:body(Req) of
                            % Make sure body contains a json with new password
                            <<"{\"password\":", _/binary>> ->
                                {#rest_response{code = 204}, State};
                            _ ->
                                {#rest_response{code = 401}, State}
                        end;
                    _ ->
                        {#rest_response{code = 401}, State}
                end
            end
        }
    ].

tcp_server_mocks() -> [].
